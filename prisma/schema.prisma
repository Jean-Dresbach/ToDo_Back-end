// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String @map("full_name") @db.VarChar(100)
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(100)

  createdAt DateTime  @default(now()) @map("crated_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Task      Task[]
  Session   Session[]

  @@map("users")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Task {
  id          String     @id @default(uuid()) @db.Uuid
  title       String     @db.VarChar(100)
  description String     @db.VarChar(255)
  status      TaskStatus @default(PENDING)

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("crated_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks")
}

model Session {
  id        String @id @default(uuid()) @db.Uuid
  csrfToken String @default(uuid()) @db.Uuid

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("crated_at")
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}
